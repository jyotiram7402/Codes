public class NQueens {
    public static void printBoard(int[] board) {
        int n = board.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }

    public static boolean isSafe(int[] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col ||             // Check if there's a queen in the same column
                    Math.abs(board[i] - col) == Math.abs(i - row)) {  // Check if there's a queen in the same diagonal
                return false;
            }
        }
        return true;
    }

    public static void solveNQueens(int n, int row, int[] board) {
        if (row == n) {
            printBoard(board);
            System.out.println();
        } else {
            for (int col = 0; col < n; col++) {
                if (isSafe(board, row, col)) {
                    board[row] = col;
                    solveNQueens(n, row + 1, board);
                    board[row] = -1;  // Backtrack
                }
            }
        }
    }

    public static void main(String[] args) {
        int n = 8; // Change n to the desired board size
        int[] board = new int[n];

        // Initialize the board with -1 (no queen placed yet)
        for (int i = 0; i < n; i++) {
            board[i] = -1;
        }

        // Start with the first queen (row 0)
        board[0] = 0;

        System.out.println("N-Queens Solutions:");
        solveNQueens(n, 1, board);
    }
}
